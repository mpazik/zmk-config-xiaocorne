/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define COMBO_TIMEOUT 60
#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define HYPERLAND   3
#define DANGER  4

/ {
    combos {
        compatible = "zmk,combos";
    };
};

&caps_word { continue-list = <UNDERSCORE MINUS BACKSPACE DELETE HOME END LEFT RIGHT>; };

&kscan0 { debounce-period = <20>; };

/ {
    behaviors {
        bh: layer_taps {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer-Tap";
            #binding-cells = <2>;
            tapping_term_ms = <215>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        sm: shift_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //             | GUI | LWR | ENT |   | SPC | RSE  | ALT |

            bindings = <
&trans  &kp Q        &kp W  &kp E           &kp R                     &kp T            &kp Y      &kp U    &kp I           &kp O    &kp P           &trans
&trans  &kp A        &kp S  &kp D           &kp F                     &kp G            &kp H      &kp J    &kp K           &kp L    &bh 4 SQT       &trans
&trans  &mt LSHFT Z  &kp X  &kp C           &kp V                     &kp B            &kp N      &kp M    &kp COMMA       &kp DOT  &mt RSHFT FSLH  &trans
                            &mt LGUI MINUS  &mt LEFT_SHIFT SEMICOLON  &mt LCTRL RET    &kp SPACE  &kp TAB  &mt RALT LC(V)
            >;

            label = "BASE";
        };

        lower_layer {
            bindings = <
&trans  &kp F1   &kp F2    &kp F3             &kp F4     &kp F5          &kp PG_UP        &kp N7          &kp N8         &kp N9          &kp BSPC         &trans
&trans  &kp F6   &kp F7    &kp UP_ARROW       &kp F8     &kp F9          &bh 0 PAGE_DOWN  &bh 1 NUMBER_4  &bh 2 N5       &bh 3 NUMBER_6  &bh 4 BACKSLASH  &trans
&trans  &kp F10  &kp LEFT  &kp DOWN           &kp RIGHT  &kp F12         &kp INS          &kp N1          &kp N2         &kp N3          &kp LC(RET)      &trans
                           &kp LC(LA(LSHFT))  &kp F11    &mt RALT RET    &mt LCTRL SPACE  &kp N0          &mt LSHFT DOT
            >;

            label = "Numbers";
        };

        raise_layer {
            bindings = <
&trans  &kp EXCL  &kp AT     &kp HASH   &kp DLLR      &kp PRCNT            &kp CARET    &kp AMPS       &kp KP_MULTIPLY   &kp LPAR           &kp RPAR    &trans
&trans  &kp TAB   &kp CAPS   &kp F13    &out OUT_TOG  &kp LGUI             &bh 0 MINUS  &bh 1 EQUAL    &bh 2 LEFT_BRACE  &bh 3 RIGHT_BRACE  &bh 4 PIPE  &trans
&trans  &kp ESC   &kp GRAVE  &kp QMARK  &kp F9        &kp F17              &kp UNDER    &kp PLUS       &kp LBKT          &kp RBKT           &kp BSLH    &trans
                             &kp LCTRL  &kp LALT      &mt LSHFT LS(INS)    &kp RET      &kp SEMICOLON  &mt RALT TILDE
            >;

            label = "Symbols";
        };

        hyperland {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_NXT  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LG(Q)     &kp LG(F)     &kp LG(E)   &trans  &trans       &to 0   &to 1   &to 2   &to 3   &to 4   &trans
&trans  &kp LG(R)     &kp LG(D)     &trans      &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans      &trans  &kp LG(C)    &trans  &trans  &trans
            >;
        };

        danger_layer {
            bindings = <
&trans  &bootloader  &kp AT  &kp HASH       &kp PAUSE_BREAK  &kp SLCK           &kp C_VOL_UP   &hm LC(V) LC(C)  &none          &kp LC(LA(DEL))  &bootloader  &trans
&trans  &trans       &trans  &kp LC(LSHFT)  &mt LSHFT UP     &mt LCTRL PSCRN    &kp C_VOL_DN   &trans           &trans         &kp UP           &kp SEMI     &trans
&trans  &kp LNLCK    &trans  &kp LEFT       &kp DOWN         &kp RIGHT          &kp C_MUTE     &trans           &kp LEFT       &kp DOWN         &kp RIGHT    &trans
                             &kp LG(Z)      &kp LG(X)        &kp LG(C)          &kp LC(LA(W))  &kp LC(LA(P))    &kp LC(LA(R))
            >;

            label = "**DANGER**";
        };
    };
};
